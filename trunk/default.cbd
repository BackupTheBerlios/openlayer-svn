# Replacement to OpenLayers dying Makefile

# check verbose output
ifopt verbose verbose 1

# Lets force configuration
ifopt configure configure = "true"

# Enable developement options
ifopt developer oldevelop = "true"

# Display Help
do ifopt help
	echo "This builds the OpenLayer 2.0 library. 
To compile run:"
	do ifplat win32
		echo "buildme.bat [OPT] ..."
	else
		echo "cbuild.c [OPT] ..."
	done
	echo "
[OPTIONS]
help      - Prints this information
verbose   - Enable verbose output
configure - Force configuration prompts
clean     - Clean up resources
install   - installs the library
uninstall - uninstalls the library
developer - Enables the developer configuration prompts"
	exit 0
done

# need to setup variables and directories beforehand
AR = ar
AR_OPT = rcs
OBJ_DIR = obj
DEP_DIR = dep
LIB_PRE = lib/
LIB_EXT = .a
LIB_SOURCES = $(ls src)

LIB_SOURCES -= src/
src_paths src

# Goto target clean
ifopt clean goto clean

# Goto target install
ifopt install goto install

# Goto target uninstall
ifopt uninstall goto uninstall

# Check whether forcing configuration
do if $(tolower ${'configure'})='true'
	goto checktarget
done

# If we have a prior configuration load it and commence build
do ifexist options
	setinput options
	read tempstr
	target = ${'tempstr'}
	read tempstr
	CPPFLAGS = ${'tempstr'}
	read tempstr
	LDFLAGS = ${'tempstr'}
	read tempstr
	CONFIGFLAGS = ${'tempstr'}
	read tempstr
	CONFIGLIBS = ${'tempstr'}
	goto build
done

# Platform precheck
ifplat linux target='linux'
ifplat win32 target='msys'
ifplat macosx target='macosx'
ifnot ${'target'}='' goto targetfine

# Prompt user for target
:checktarget
echo "Please specify a build target.
Available targets are:
linux, msys, msvc, and macosx (case insensitive)
Enter exit or cancel if you don't want to compile"
read target
:targetfine
do if $(tolower ${'target'})=''
	goto checktarget
else if $(tolower ${'target'})='exit' exit 0
else if $(tolower ${'target'})='cancel' exit 0
else ifnot $(tolower ${'target'})='linux' ifnot $(tolower ${'target'})='msys' ifnot $(tolower ${'target'})='msvc' ifnot $(tolower ${'target'})='macosx'
	echo ""
	echo "${'target'} is an invalid target."
	echo ""
	goto checktarget
done
do if $(tolower ${'target'})='linux'
	echo "Seting up for linux environment"
	CPPFLAGS+=-O2 -Wall -Iinclude -Iinclude/OpenLayer `freetype-config --cflags` -fexpensive-optimizations
	LDFLAGS=-lglyph-agl `freetype-config --libs` `libpng-config --libs` -lldpng -lagl `allegro-config --libs` -lGL -lGLU
else if $(tolower ${'target'})='msys'
	echo "Seting up for msys environment"
	do ifexist ${'MINGDIR'}/include/freetype2
		CPPFLAGS+=-O2 -Wall -Iinclude -Iinclude/OpenLayer -I%MINGDIR%/include/freetype2 -fexpensive-optimizations
	else ifexist ${'MINGDIR'}/local/include/freetype2
		CPPFLAGS+=-O2 -Wall -Iinclude -Iinclude/OpenLayer -I%MINGDIR%/local/include/freetype2 -fexpensive-optimizations
	else 
		CPPFLAGS+=-O2 -Wall -Iinclude -Iinclude/OpenLayer -fexpensive-optimizations
	done
	LDFLAGS=-lglyph-agl -lfreetype -lldpng -lpng -lz -lagl -lalleg -luser32 -lgdi32 -lglu32 -lopengl32
else if $(tolower ${'target'})='msvc'
	echo "Seting up for msvc environment"
	echo "Sorry msvc is not supported yet"
	exit 1
else if $(tolower ${'target'})='macosx'
	echo "Seting up for macosx environment"
	CPPFLAGS+=-O2 -Wall -Iinclude -Iinclude/OpenLayer `freetype-config --cflags` -fexpensive-optimizations
	LDFLAGS=-lglyph-agl `freetype-config --libs` -lldpng -lpng -lz -lagl `allegro-config --libs` -framework OpenGL -framework Carbon
done

# Prompt user for preprocessor support

:NOPNG
echo "Do you wish to drop PNG support? [y/N]"
read PNG
do if $(tolower ${'PNG'})='y'
	CPPFLAGS += " -DOL_NO_PNG"
else if $(tolower ${'PNG'})='yes'
	CPPFLAGS += " -DOL_NO_PNG"
else ifnot $(tolower ${'PNG'})='n' ifnot $(tolower ${'PNG'})='no' ifnot ${'PNG'}='' goto NOPNG
done

do if ${'PNG'}=''
	CONFIGFLAGS += "`libpng-config --cflags` "
	CONFIGLIBS += "`libpng-config --libs` -lldpng "
else if ${'PNG'}='n'
	CONFIGFLAGS += "`libpng-config --cflags` "
	CONFIGLIBS += "`libpng-config --libs` -lldpng "
else if ${'PNG'}='no'
	CONFIGFLAGS += "`libpng-config --cflags` "
	CONFIGLIBS += "`libpng-config --libs` -lldpng "
done

:NOTTF
echo "Do you wish to drop TTF support? [y/N]"
read TTF
do if $(tolower ${'TTF'})='y'
	CPPFLAGS += " -DOL_NO_TTF"
else if $(tolower ${'TTF'})='yes'
	CPPFLAGS += " -DOL_NO_TTF"
else ifnot $(tolower ${'TTF'})='n' ifnot $(tolower ${'TTF'})='no' ifnot ${'TTF'}='' goto NOTTF
done

do if $(tolower ${'TTF'})='y'
	goto NOOLDAPI
done

CONFIGFLAGS += "`freetype-config --cflags` "
CONFIGLIBS += "`freetype-config --libs` -lglyph-agl "

do ifnot $(tolower ${'oldevelop'})='true'
	goto NOOLDAPI
done

:NONEWTTF
echo "Do you wish to use FreeFont directly and drop GlypKeeper?(development only) [y/N]"
read NEWTTF
do if $(tolower ${'NEWTTF'})='y'
	CPPFLAGS += " -DUSE_NEW_TTF"
	LDFLAGS -= "-lglyph-agl "
	CONFIGLIBS-="-lglyph-agl "
else if $(tolower ${'NEWTTF'})='yes'
	CPPFLAGS += " -DUSE_NEW_TTF"
	LDFLAGS -= "-lglyph-agl "
	CONFIGLIBS-="-lglyph-agl "
else ifnot $(tolower ${'NEWTTF'})='n' ifnot $(tolower ${'NEWTTF'})='no' ifnot ${'NEWTTF'}='' goto NONEWTTF
done	
	
:NOOLDAPI
echo "Do you wish to drop old API Support? [y/N]"
read OLDAPI
do if $(tolower ${'OLDAPI'})='y'
	CPPFLAGS += " -DOL_NO_OLD_API"
else if $(tolower ${'OLDAPI'})='yes'
	CPPFLAGS += " -DOL_NO_OLD_API"
else ifnot $(tolower ${'OLDAPI'})='n' ifnot $(tolower ${'OLDAPI'})='no' ifnot ${'OLDAPI'}='' goto NOOLDAPI
done
:NOSTATECHANGE
echo "Do you wish to drop State Changes? [y/N]"
read STATECHANGE
do if $(tolower ${'STATECHANGE'})='y'
	CPPFLAGS += " -DOL_NO_STATE_CHANGE"
else if $(tolower ${'STATECHANGE'})='yes'
	CPPFLAGS += " -DOL_NO_STATE_CHANGE"
else ifnot $(tolower ${'STATECHANGE'})='n' ifnot $(tolower ${'STATECHANGE'})='no' ifnot ${'STATECHANGE'}='' goto NOSTATECHANGE
done

# Finishing touches on the openlayer-config script
do ifplat linux
	CONFIGFLAGS += "`allegro-config --cflags` "
	CONFIGLIBS += "-lagl `allegro-config --libs` -lGL -lGLU "
else ifplat macosx
	CONFIGFLAGS += "`allegro-config --cflags` "
	CONFIGLIBS += "-lagl `allegro-config --libs` -framework OpenGL -framework Carbon "
done

# Create options file and retain users choices
writefile options ${'target'}
appendfile options ${'CPPFLAGS'}
appendfile options ${'LDFLAGS'}
appendfile options ${'CONFIGFLAGS'}
appendfile options ${'CONFIGLIBS'}
goto build

# Start building library
:build
echo "- Creating required directories -"
-mkdir obj
-mkdir dep
-mkdir lib
echo "- Starting compilation -"
compile ${LIB_SOURCES}
echo "- Assembling library -"
-rm lib/libopenlayer.a
linklib libopenlayer
echo "
- Compilation completed -

You can now install the lib by running:"
do ifplat win32
	echo "buildme.bat install"
else
	echo "cbuild.c install"
done
exit 0

# Install library
:install
do ifexist lib/libopenlayer.a
:installask
	echo "Where do you wish to install OpenLayer?"
	do ifplat win32
		echo "example: c:\mingw (make sure lib and include exist in the directory)"
	else
		echo "example: /usr/local (make sure lib and include exist in the directory)"
	done
	echo "Enter exit or cancel if you don't want to install at this time."
	read LOCATION
	do if $(tolower ${'LOCATION'})='cancel' exit 0
	else if $(tolower ${'LOCATION'})='exit' exit 0
	else if ${'LOCATION'}='' goto installask
	else ifexist ${'LOCATION'}/lib ifexist ${'LOCATION'}/include
		echo "Installing OpenLayer to ${'LOCATION'}"
		LIB_HEADERS = $(ls include/OpenLayer/)
		
		-mkdir ${'LOCATION'}/include/OpenLayer
		ifnplat win32 -call chmod 755 ${'LOCATION'}/include/OpenLayer
:copystart
		HEADER = $(word 1, ${LIB_HEADERS})
		popfront LIB_HEADERS
		if ${'HEADER'}='' goto copyend
		copy ${'HEADER'} ${'LOCATION'}/include/OpenLayer/
		goto copystart	
:copyend
		copy include/OpenLayer.hpp ${'LOCATION'}/include/
		copy lib/libopenlayer.a ${'LOCATION'}/lib/
		writefile installdir ${'LOCATION'}
		ifnplat win32 goto doconfigscript
:libinstallfinish
		echo ""
		echo "Install completed"
		exit 0
	else ifnexist ${'LOCATION'}/lib ifnexist ${'LOCATION'}/include
		echo ""
		echo "${'LOCATION'} is an invalid install location."
		echo ""
		goto installask
	done
else ifnexist lib/libopenlayer.a
	echo "Please compile OpenLayer first."
	exit 1
done

:uninstall
do ifexist installdir
	setinput installdir
	read tempstr
	LOCATION = ${'tempstr'}
	setinput
	goto uninstallok
done
echo "It seems there is no install history."
:uninstallask
echo "Provide the location of where OpenLayer is installed.
Enter exit or cancel if you don't want to uninstall at this time."
read LOCATION
do if $(tolower ${'LOCATION'})='exit' exit 0
else if $(tolower ${'LOCATION'})='cancel' exit 0
else ifnexist ${'LOCATION'}/lib/libopenlayer.a ifnexist ${'LOCATION'}/include/OpenLayer.hpp
	echo ""
	echo "There seems to be no OpenLayer installation at ${'LOCATION'}"
	echo ""
	goto uninstallask
done
:uninstallok
echo "Uninstalling OpenLayer from ${'LOCATION'}"
-rm ${'LOCATION'}/lib/libopenlayer.a
-rm ${'LOCATION'}/include/OpenLayer.hpp
HEADERS = $(ls ${'LOCATION'}/include/OpenLayer/)

:uninststart
	HEADER = $(word 1, ${HEADERS})
	popfront HEADERS
	if ${'HEADER'}='' goto uninstend
	-rm ${'HEADER'}
	goto uninststart
:uninstend
-rm ${'LOCATION'}/include/OpenLayer
-rm ${'LOCATION'}/bin/openlayer-config
-rm installdir
exit 0

# clean up library
:clean
echo "- Cleaning up -"
-rmobj ${LIB_SOURCES}
-rm lib/libopenlayer.a
-rm options
-rm installdir
-rm obj
-rm lib
-rm dep
exit 0

# Create openlayer-config script for *nix based systems
:doconfigscript
setinput options
read tempstr
read tempstr
read tempstr
read tempstr
CONFIGFLAGS = ${'tempstr'}
read tempstr
CONFIGLIBS = ${'tempstr'}
setinput
writefile ${'LOCATION'}/bin/openlayer-config \#!/bin/sh
appendfile ${'LOCATION'}/bin/openlayer-config \# openlayer-config autogenerated by cbuild script from the OpenLayer library
appendfile ${'LOCATION'}/bin/openlayer-config
appendfile ${'LOCATION'}/bin/openlayer-config version=2.0
appendfile ${'LOCATION'}/bin/openlayer-config prefix=${'LOCATION'}
appendfile ${'LOCATION'}/bin/openlayer-config cflags=\"-I\$prefix/include -I\$prefix/include/OpenLayer ${CONFIGFLAGS}\"
appendfile ${'LOCATION'}/bin/openlayer-config libs=\"-lopenlayer ${CONFIGLIBS}\"
appendfile ${'LOCATION'}/bin/openlayer-config
appendfile ${'LOCATION'}/bin/openlayer-config usage()
appendfile ${'LOCATION'}/bin/openlayer-config {
appendfile ${'LOCATION'}/bin/openlayer-config     cat <<EOF
appendfile ${'LOCATION'}/bin/openlayer-config Usage: openlayer-config [OPTION]...
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config Known values for OPTION are:
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config   --libs                print library linking information
appendfile ${'LOCATION'}/bin/openlayer-config   --cflags              print pre-processor and compiler flags
appendfile ${'LOCATION'}/bin/openlayer-config   --version             output version information
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config EOF
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config     exit \$1
appendfile ${'LOCATION'}/bin/openlayer-config }
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config if test \$\# -eq 0; then
appendfile ${'LOCATION'}/bin/openlayer-config     usage 1
appendfile ${'LOCATION'}/bin/openlayer-config fi
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config while test \$\# -gt 0; do
appendfile ${'LOCATION'}/bin/openlayer-config     case "\$1" in
appendfile ${'LOCATION'}/bin/openlayer-config     -*=*) optarg=`echo "\$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
appendfile ${'LOCATION'}/bin/openlayer-config     *) optarg= ;;
appendfile ${'LOCATION'}/bin/openlayer-config     esac
appendfile ${'LOCATION'}/bin/openlayer-config
appendfile ${'LOCATION'}/bin/openlayer-config     case "\$1" in
appendfile ${'LOCATION'}/bin/openlayer-config     --version)
appendfile ${'LOCATION'}/bin/openlayer-config         echo \$version
appendfile ${'LOCATION'}/bin/openlayer-config         ;;
appendfile ${'LOCATION'}/bin/openlayer-config     --cflags)
appendfile ${'LOCATION'}/bin/openlayer-config         echo \$cflags
appendfile ${'LOCATION'}/bin/openlayer-config         ;;
appendfile ${'LOCATION'}/bin/openlayer-config 
appendfile ${'LOCATION'}/bin/openlayer-config     --libs)
appendfile ${'LOCATION'}/bin/openlayer-config         echo \$libs
appendfile ${'LOCATION'}/bin/openlayer-config         ;;
appendfile ${'LOCATION'}/bin/openlayer-config     esac
appendfile ${'LOCATION'}/bin/openlayer-config     shift
appendfile ${'LOCATION'}/bin/openlayer-config done
-call chmod +x ${'LOCATION'}/bin/openlayer-config
goto libinstallfinish

# Create include header